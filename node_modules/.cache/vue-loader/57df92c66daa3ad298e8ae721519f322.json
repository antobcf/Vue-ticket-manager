{"remainingRequest":"/Users/antoniobelculfine/Library/Mobile Documents/com~apple~CloudDocs/Stage/Ticket-Asset-Management/interface/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/antoniobelculfine/Library/Mobile Documents/com~apple~CloudDocs/Stage/Ticket-Asset-Management/interface/src/components/ListAssets.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/antoniobelculfine/Library/Mobile Documents/com~apple~CloudDocs/Stage/Ticket-Asset-Management/interface/src/components/ListAssets.vue","mtime":1629211037329},{"path":"/Users/antoniobelculfine/Library/Mobile Documents/com~apple~CloudDocs/Stage/Ticket-Asset-Management/interface/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antoniobelculfine/Library/Mobile Documents/com~apple~CloudDocs/Stage/Ticket-Asset-Management/interface/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/antoniobelculfine/Library/Mobile Documents/com~apple~CloudDocs/Stage/Ticket-Asset-Management/interface/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/antoniobelculfine/Library/Mobile Documents/com~apple~CloudDocs/Stage/Ticket-Asset-Management/interface/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/antoniobelculfine/Library/Mobile Documents/com~apple~CloudDocs/Stage/Ticket-Asset-Management/interface/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNhc3NldHNMaXN0IHsKICBvdmVyZmxvdzogc2Nyb2xsOwogIGhlaWdodDogNTB2aDsKfQoKCg=="},{"version":3,"sources":["ListAssets.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA;AACA;AACA;AACA","file":"ListAssets.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <div>\n            <button @click=\"backButton\">Back</button>\n            <button @click=\"openAssetForm\">{{buttonText}}</button>\n            <div id=\"formAsset\" style=\"display: none;\">\n                <form @submit.prevent=\"postData\" method=\"post\" id=\"newAsset\">\n                    <div class=\"form-group\">\n                        <br>\n                        <input type=\"text\" name=\"name\" placeholder=\"Name asset\" v-model=\"newName\" class=\"form-control\">\n                        <span v-if=\"!$v.newName.required && $v.newName.$dirty\" class=\"text-danger\">Name asset is required!</span><br>\n                    </div>\n                    <div class=\"form-group\">\n                        <select v-model=\"newStatus\" class=\"form-control\">\n                            <option value=\"\" disabled selected>Select status</option>\n                            <option value=\"operative\">Operative</option>\n                            <option value=\"notOperative\">Out of order</option>\n                        </select>\n                        <span v-if=\"!$v.newStatus.required && $v.newStatus.$dirty\" class=\"text-danger\">Status asset is required!</span><br>\n                    </div>\n                    <button type=\"submit\">Confirm</button><br>\n                </form>\n            </div>\n        </div>\n\n        <div id=\"assetsList\">\n            <ul style=\"list-style-type:none;\" >\n                <li v-for=\"(asset, index) in assets\" v-bind:key=\"asset.asset_id\">\n                {{asset.id}} - {{asset.name}} - Status: {{asset.status}}\n                <!-- <button @click=\"editAsset(index)\">Change status</button> -->\n                <button @click=\"deleteAsset(index)\">Delete asset</button>\n                </li>\n            </ul>\n        </div>\n    </div>\n</template>\n\n<script>\nimport Vue from 'vue' \nimport axios from 'axios'\nimport VueAxios from 'vue-axios'  \nimport Vuelidate from 'vuelidate'\nimport {required} from 'vuelidate/lib/validators'\n\nVue.use(VueAxios, axios)\nVue.use(Vuelidate)\n\nexport default {\n    name: 'ListAssets',\n    data() {\n        return {\n            assets: [],\n            newName: '',\n            newStatus: '',\n            buttonText: 'Create new asset'\n        }\n    },\n    validations: {\n        newName: {required},\n        newStatus: {required}\n    },\n    mounted() {\n        this.getData()\n    },\n    methods: {\n        getData() {\n            axios.get(\"http://localhost:8082/asset/\")\n            .then((response) => {\n                this.assets = response.data\n            })\n        },\n        deleteAsset(index) {\n            axios.delete(\"http://localhost:8082/asset/delete/\"+this.assets[index].id)\n            this.$delete(this.assets, index)\n        },\n        editAsset(index) {\n            if(this.assets[index].status == \"operating\") {\n                this.assets[index].status = \"out of service\"\n            } else {\n                this.assets[index].status = \"operating\"\n            }\n            axios.put(\"http://localhost:8082/asset/update/\"+this.assets[index].id, {status: this.assets[index].status})\n        },\n        openAssetForm() {\n            var x = document.getElementById(\"formAsset\")\n            if(x.style.display == \"none\") {\n                x.style.display = \"block\"\n                this.buttonText = \"Close\"\n            } else {\n                x.style.display = \"none\"\n                this.buttonText = \"Crea new asset\"\n            }\n        },\n        postData() {\n            this.$v.$touch();\n            if(this.newName && this.newStatus) {\n                axios.post(\"http://localhost:8082/asset/new\", {name: this.newName, status: this.newStatus},{headers:{'Content-Type' : 'application/json;charset=utf-8'}})\n                var x = document.getElementById(\"formAsset\")\n                x.style.display = \"none\"   \n                \n                this.getData()\n                this.getData() //why??\n\n                this.newName = ''\n                this.newStatus = ''\n                this.$v.$reset();\n            } \n        },\n        backButton() {\n            this.$router.go(-1)\n        }\n    }\n}\n</script>\n\n<style>\n\n\n#assetsList {\n  overflow: scroll;\n  height: 50vh;\n}\n\n\n</style>"]}]}